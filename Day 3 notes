<<<<<<<<<<<<<<<<<<<<<<<<<Introduction to Clickjacking>>>>>>>>>>>>>>>>>>>>>>>>>>>>
It is a technique used by hackers to to make visitors of a certain page to perform a certain action without knowing.

They hide elements under each other . They can do that with the help of CSS properties like: opacity and blur.

we can prevent that using intersection observer.

<<<<<<<<<<<<<<<<<<<Old school defenses (weak)>>>>>>>>>>>>>>

The old school defense is like the:

if (top != window) {

  top.location = window.location;

} ;

In this case, the window checks if it's the top then if not it makes itself the top.
This is not a reliable defense, because there are many ways to hack around it.

Blocking top-navigation typically refers to a web development practice where certain actions or elements in a web page's user interface are disabled or restricted to the user. This can be done for various reasons, such as to prevent users from navigating away from a particular page, to restrict access to certain features, or to guide users through a specific flow or process.

We can block the transition caused by changing top.location in beforeunload event handler.

The top page (enclosing one, belonging to the hacker) sets a preventing handler to it, like this:

window.onbeforeunload = function() {

  return false;

};

When the iframe tries to change top.location, the visitor gets a message asking them whether they want to leave.

In most cases the visitor would answer negatively because they don’t know about the iframe – all they can see is the top page, there’s no reason to leave. So top.location won’t change.


Sandbox attribute
One of the things restricted by the sandbox attribute is navigation. A sandboxed iframe may not change top.location.

So we can add the iframe with sandbox="allow-scripts allow-forms". That would relax the restrictions, permitting scripts and forms. But we omit allow-top-navigation so that changing top.location is forbidden.

Here’s the code:

<iframe sandbox="allow-scripts allow-forms" src="facebook.html"></iframe>

There are other ways to work around that simple protection too.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

<<<<<<<<<<<<<<<<<<<<<--------------X-Frame-Options------------------>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
X-Frame-Options header to control whether a web page can be displayed within a frame when you are building a web application.
To do this, you typically work on the server side to set the header in the HTTP response. 

The header may have 3 values:

DENY
Never ever show the page inside a frame.

SAMEORIGIN
Allow inside a frame if the parent document comes from the same origin.

ALLOW-FROM domain
Allow inside a frame if the parent document is from the given domain.

For instance, Twitter uses X-Frame-Options: SAMEORIGIN.

Here’s the result:

<iframe src="https://twitter.com"></iframe>

Depending on your browser, the iframe above is either empty or alerting you that the browser won’t permit that page to be navigating in this way.

Showing with disabled functionality
The X-Frame-Options header has a side-effect. Other sites won’t be able to show our page in a frame, even if they have good reasons to do so.

So there are other solutions… For instance, we can “cover” the page with a <div> with styles height: 100%; width: 100%;, so that it will intercept all clicks.
That <div> is to be removed if window == top or if we figure out that we don’t need the protection.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

<<<<<<<<<<<<<<<<<------SAMESITE COOKIES ATTRIBUTE------------------>>>>>>>>>>>>>>>
Another method to prevent clickjacking is samesite cookies attribute.
A cookie with such attribute is only sent to a website if it’s opened directly, not via a frame, or otherwise.
